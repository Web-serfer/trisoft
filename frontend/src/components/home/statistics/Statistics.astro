---
const stats = [
  {
    value: 148,
    label: 'Проектов',
    description: 'Успешно завершенных и внедренных',
  },
  {
    value: 38,
    label: 'Заказчиков',
    description: 'Довольных клиентов по всей России',
  },
  {
    value: 9,
    label: 'Лет на рынке',
    description: 'С 2015 года создаем лучшие решения',
  },
]
---

<section class="py-20 bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        Наши достижения в цифрах
      </h2>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">
        С 2015 года мы достигли серьёзных успехов в разработке и сопровождении программных продуктов на платформе 1С.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
      {stats.map((stat, index) => (
        <div class="stat-card bg-gray-50 p-8 rounded-2xl shadow-lg border border-gray-100 transform transition-transform duration-500 hover:scale-105">
          <div class="text-5xl font-extrabold text-blue-600 mb-3" data-target={stat.value}>
            0
          </div>
          <div class="text-xl font-semibold text-gray-800 mb-2">{stat.label}</div>
          <p class="text-gray-500">{stat.description}</p>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const counters = document.querySelectorAll('.stat-card [data-target]');

    const animateCounter = (counter) => {
      const target = +counter.getAttribute('data-target');
      const duration = 2000; // 2 секунды
      const stepTime = Math.abs(Math.floor(duration / target));
      let current = 0;

      const updateCount = () => {
        current++;
        counter.innerText = String(current);
        if (current < target) {
          setTimeout(updateCount, stepTime);
        }
      };
      setTimeout(updateCount, stepTime);
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animateCounter(entry.target);
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });

    counters.forEach(counter => {
      observer.observe(counter);
    });
  });
</script>
