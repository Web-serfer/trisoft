---
import {Image} from 'astro:assets';

// Разработка
import devMainImage from '@assets/images/filtersCards/development-main.avif';
import devModuleImage from '@assets/images/filtersCards/development-module.avif';
import devMobileImage from '@assets/images/filtersCards/development-mobile.avif';
// Настройка
import setupInitialImage from '@assets/images/filtersCards/setup-initial.avif';
import setupExchangeImage from '@assets/images/filtersCards/setup-exchange.avif';
import setupHardwareImage from '@assets/images/filtersCards/setup-hardware.avif';
// Остальные
import outsourceImage from '@assets/images/filtersCards/outsourcing.avif';
import supportComplexImage from '@assets/images/filtersCards/support-complex.avif';
import implementationMainImage from '@assets/images/filtersCards/implementation-main.avif';
import optimizationImage from '@assets/images/filtersCards/optimization.avif';
import auditImage from '@assets/images/filtersCards/audit.avif';
import migrationImage from '@assets/images/filtersCards/migration.avif';


// Данные для фильтров (без изменений)
const filtersData = [
  {id: 'all', label: 'Все'},
  {id: 'development', label: 'Разработка 1С'},
  {id: 'outsourcing', label: 'Аутсорс задач'},
  {id: 'support', label: 'Сопровождение 1С'},
  {id: 'implementation', label: 'Внедрение 1С'},
  {id: 'setup', label: 'Настройка 1С'},
];

// Данные для карточек (каждой карточке присвоено уникальное изображение)
const cardsData = [
  // --- 3 карточки "Разработка 1С" ---
  {
    id: 1,
    categories: ['development'],
    title: 'Разработка 1С под ключ',
    description: 'Готовые и индивидуальные 1С решения под задачи бизнеса. Доработка, настройка и интеграция с другими системами.',
    image: devMainImage
  },
  {
    id: 2,
    categories: ['development', 'implementation'],
    title: 'Модуль управления проектами и сделками в 1C',
    description: 'Готовый модуль 1С управления сделками и проектами для вашего бизнеса',
    image: devModuleImage
  },
  {
    id: 3,
    categories: ['development'],
    title: 'Разработка мобильных приложений 1С',
    description: 'Создание удобных и функциональных мобильных клиентов для работы с вашей базой 1С из любой точки мира.',
    image: devMobileImage
  },
  // --- 3 карточки "Настройка 1С" ---
  {
    id: 4,
    categories: ['setup'],
    title: 'Первичная настройка 1С',
    description: 'Адаптация и настройка типовой конфигурации системы под ваши уникальные бизнес-процессы.',
    image: setupInitialImage
  },
  {
    id: 5,
    categories: ['setup'],
    title: 'Настройка обмена данными',
    description: 'Синхронизация данных между различными базами и конфигурациями 1С для целостности информации.',
    image: setupExchangeImage
  },
  {
    id: 6,
    categories: ['setup', 'implementation'],
    title: 'Подключение торгового оборудования',
    description: 'Интеграция и настройка сканеров штрих-кодов, онлайн-касс, принтеров этикеток и электронных весов.',
    image: setupHardwareImage
  },
  // --- Остальные 6 карточек для разнообразия ---
  {
    id: 7,
    categories: ['outsourcing'],
    title: 'Аутсорс 1С программистов в Москве',
    description: 'Передайте нам любые задачи по 1С, от рутинных операций до сложных доработок, и сфокусируйтесь на главном.',
    image: outsourceImage
  },
  {
    id: 8,
    categories: ['support'],
    title: 'Комплексное сопровождение 1С',
    description: 'Гарантированная техническая поддержка, оперативные консультации и регулярные обновления 24/7.',
    image: supportComplexImage
  },
  {
    id: 9,
    categories: ['implementation'],
    title: 'Внедрение 1С:Предприятие',
    description: 'Полный цикл внедрения типовых и отраслевых решений: от анализа требований до обучения персонала.',
    image: implementationMainImage
  },
  {
    id: 10,
    categories: ['support'],
    title: 'Оптимизация и ускорение 1С',
    description: 'Анализ и устранение узких мест для ускорения работы баз данных и снижения нагрузки на сервер.',
    image: optimizationImage
  },
  {
    id: 11,
    categories: ['support'],
    title: 'Аудит производительности',
    description: 'Полный технический анализ системы для выявления и устранения проблем, влияющих на скорость работы.',
    image: auditImage
  },
  {
    id: 12,
    categories: ['implementation', 'support'],
    title: 'Переход на новые редакции 1С',
    description: 'Безопасный и быстрый перенос данных со старых версий программ на самые актуальные и производительные.',
    image: migrationImage
  },
];


// Создаем Map для быстрого поиска названий тегов по их ID
const filterLabelsMap = new Map(filtersData.map(f => [f.id, f.label]));
---

<section class="py-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">Экспертные услуги 1С</h2>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">Профессиональные решения для автоматизации и развития вашего
        бизнеса</p>
    </div>

    <div class="flex flex-wrap justify-center gap-4 mb-12">
      {filtersData.map((filter, index) => (
          <button
              data-filter={filter.id}
              class:list={['filter-btn px-6 py-3 font-medium rounded-xl transition-all duration-300 transform hover:-translate-y-1 hover:cursor-pointer', index === 0 ? 'bg-[#FDE6EA] text-pink-700 border border-pink-200 shadow-sm active-filter' : 'bg-white text-gray-700 border border-gray-200 hover:bg-gray-50']}>
            {filter.label}
          </button>
      ))}
    </div>

    <div id="cards-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {cardsData.map((card, index) => (
          <div
              data-categories={card.categories.join(' ')}
              class:list={["card-item group bg-white border border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl", {'is-hiding card-hidden': index >= 6}]}>
            <div class="relative overflow-hidden aspect-video">
              <Image src={card.image} alt={`Иллюстрация для услуги: ${card.title}`}
                     class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                     densities={[1.5, 2]} loading="lazy"/>
            </div>
            <div class="p-6 flex flex-col">
              <h3 class="text-xl font-bold text-gray-900 mb-2">{card.title}</h3>
              <p class="text-gray-600 leading-relaxed mb-4 flex-grow">{card.description}</p>

              <div class="flex flex-wrap gap-2 mb-6">
                {card.categories.map(categoryId => (
                    <span class="px-3 py-1 bg-pink-50 text-pink-600 text-xs font-medium rounded-full">
                    {filterLabelsMap.get(categoryId) || categoryId}
                  </span>
                ))}
              </div>

              <div class="mt-auto pt-2 text-right">
                <a href="#"
                   class="inline-flex items-center font-semibold text-gray-600 group-hover:text-gray-800 transition-colors duration-300">
                  Узнать больше
                  <svg class="ml-2 w-4 h-4 animate-beat-right learn-more-arrow" fill="none"
                       stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
      ))}
    </div>

    <div id="show-more-container" class="text-center mt-12">
      <button id="show-more-btn"
              class="inline-flex items-center justify-center h-14 px-8 bg-white text-pink-700 font-semibold rounded-xl border border-pink-200 hover:bg-[#FDE6EA] transition-all duration-300 transform hover:-translate-y-1 shadow-sm hover:cursor-pointer">
        <span id="show-more-text">Показать еще</span>
        <svg id="show-more-icon" class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<style>
    .card-item {
        transition: transform 0.4s ease, opacity 0.4s ease;
        transform-origin: center;
    }

    .is-hiding {
        transform: scale(0.9);
        opacity: 0;
        pointer-events: none;
    }

    .card-hidden {
        display: none;
    }

    #show-more-icon {
        transition: transform 0.3s ease-in-out;
    }

    .icon-rotated {
        transform: rotate(180deg);
    }

    @keyframes beat-right {
        0%, 100% {
            transform: translateX(0);
        }
        50% {
            transform: translateX(4px);
        }
    }

    .group:hover .animate-beat-right {
        animation: beat-right 1s ease-in-out infinite;
    }

    .learn-more-arrow {
        position: relative;
        top: 2px;
    }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const INITIAL_VISIBLE_CARDS = 6;
    const ANIMATION_DURATION = 400;
    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.filter-btn');
    const cards = document.querySelectorAll<HTMLElement>('.card-item');
    const showMoreBtn = document.getElementById('show-more-btn');
    const showMoreText = document.getElementById('show-more-text');
    const showMoreIcon = document.getElementById('show-more-icon');
    const showMoreContainer = document.getElementById('show-more-container');

    // Проверка на null для всех элементов, чтобы скрипт не падал
    if (!showMoreBtn || !showMoreText || !showMoreIcon || !showMoreContainer || !cards.length) {
      console.error('Filter component elements not found.');
      return;
    }

    let isExpanded = false;
    let currentFilter = 'all';

    // Функция, которая возвращает отфильтрованные карточки
    const getFilteredCards = () => {
      return Array.from(cards).filter(card => {
        // Теперь TypeScript знает, что у 'card' есть 'dataset'
        const cardCategories = card.dataset.categories?.split(' ') || [];
        return currentFilter === 'all' || cardCategories.includes(currentFilter);
      });
    };

    const updateShowMoreButton = () => {
      const filteredCards = getFilteredCards();
      if (filteredCards.length > INITIAL_VISIBLE_CARDS) {
        showMoreContainer.style.display = 'block';
        showMoreText.textContent = isExpanded ? 'Свернуть' : 'Показать еще';
        showMoreIcon.classList.toggle('icon-rotated', isExpanded);
      } else {
        showMoreContainer.style.display = 'none';
      }
    };

    const updateCardsVisibility = () => {
      const filteredCards = getFilteredCards();
      const limit = isExpanded ? filteredCards.length : INITIAL_VISIBLE_CARDS;

      // Итерируем по всем картам и решаем, скрыть или показать
      cards.forEach(card => {
        const isCurrentlyVisible = !card.classList.contains('card-hidden');
        const shouldBeVisible = filteredCards.includes(card) && filteredCards.indexOf(card) < limit;

        if (shouldBeVisible && !isCurrentlyVisible) {
          // Показать карточку
          card.classList.remove('card-hidden');
          requestAnimationFrame(() => {
            card.classList.remove('is-hiding');
          });
        } else if (!shouldBeVisible && isCurrentlyVisible) {
          // Скрыть карточку
          card.classList.add('is-hiding');
          setTimeout(() => {
            card.classList.add('card-hidden');
          }, ANIMATION_DURATION);
        }
      });

      updateShowMoreButton();
    };

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Теперь TypeScript знает, что у 'button' есть 'dataset'
        currentFilter = button.dataset.filter ?? 'all';
        isExpanded = false; // Сбрасываем "Показать еще" при смене фильтра

        filterButtons.forEach(btn => {
          btn.classList.remove('active-filter', 'bg-[#FDE6EA]', 'text-pink-700', 'border-pink-200', 'shadow-sm');
          btn.classList.add('bg-white', 'text-gray-700', 'border-gray-200', 'hover:bg-gray-50');
        });
        button.classList.add('active-filter', 'bg-[#FDE6EA]', 'text-pink-700', 'border-pink-200', 'shadow-sm');
        button.classList.remove('bg-white', 'text-gray-700', 'border-gray-200', 'hover:bg-gray-50');

        updateCardsVisibility();
      });
    });

    showMoreBtn.addEventListener('click', () => {
      isExpanded = !isExpanded;
      updateCardsVisibility();
    });

    // Первоначальная инициализация видимости карточек и кнопки
    updateShowMoreButton();
  });
</script>