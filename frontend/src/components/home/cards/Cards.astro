---
const filtersData = [
  { id: 'all', label: 'Все' },
  { id: 'development', label: 'Разработка 1С' },
  { id: 'outsourcing', label: 'Аутсорс задач' },
  { id: 'support', label: 'Сопровождение 1С' },
  { id: 'implementation', label: 'Внедрение 1С' },
  { id: 'setup', label: 'Настройка 1С' },
];

const cardsData = [
  {
    id: 1,
    category: 'development',
    title: 'Разработка 1С',
    description: 'Создание кастомных решений под ваш бизнес',
    gradient: 'from-blue-500 to-indigo-600',
    height: 'h-48',
  },
  {
    id: 2,
    category: 'outsourcing',
    title: 'Аутсорс задач',
    description: 'Выполним любые задачи по 1С',
    gradient: 'from-cyan-500 to-teal-600',
    height: 'h-32',
  },
  {
    id: 3,
    category: 'support',
    title: 'Сопровождение 1С',
    description: 'Техподдержка и обновления 24/7',
    gradient: 'from-purple-500 to-pink-600',
    height: 'h-48',
  },
  {
    id: 4,
    category: 'implementation',
    title: 'Внедрение 1С',
    description: 'Быстрое внедрение за 2 недели',
    gradient: 'from-orange-500 to-red-600',
    height: 'h-24',
  },
  {
    id: 5,
    category: 'setup',
    title: 'Настройка 1С',
    description: 'Подстройка под ваши бизнес-процессы',
    gradient: 'from-green-500 to-emerald-600',
    height: 'h-36',
  },
  {
    id: 6,
    category: 'support',
    title: 'Оптимизация 1С',
    description: 'Ускорение работы и снижение нагрузки',
    gradient: 'from-yellow-500 to-amber-600',
    height: 'h-40',
  },
];
---

<section class="py-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Заголовок секции -->
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        Экспертные услуги 1С
      </h2>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">
        Профессиональные решения для автоматизации и развития вашего бизнеса
      </p>
    </div>

    <!-- Фильтры -->
    <div class="flex flex-wrap justify-center gap-4 mb-12">
      {filtersData.map((filter, index) => (
          <button
              data-filter={filter.id}
              class={`filter-btn px-6 py-3 font-medium rounded-xl transition-all duration-300 transform hover:-translate-y-1 hover:cursor-pointer ${
                index === 0 // Делаем первую кнопку активной по умолчанию
              ? 'bg-[#FDE6EA] text-pink-700 border border-pink-200 shadow-sm'
                  : 'bg-white text-gray-700 border border-gray-200 hover:bg-gray-50'
              }`}
          >
            {filter.label}
          </button>
      ))}
    </div>

    <!-- Сетка карточек с оригинальной стилизацией -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {cardsData.map((card) => (
          <div
              data-category={card.category}
              class="card-item group relative bg-white border border-gray-200 rounded-2xl overflow-hidden shadow-sm hover:shadow-xl transition-all duration-500"
          >
            <!-- Градиентный хедер с диагональным разделением -->
            <div class="relative h-32 overflow-hidden">
              <div class={`absolute inset-0 ${card.gradient}`}></div>
              <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent transform -skew-x-12"></div>

              <!-- Иконка в левом верхнем углу -->
              <div class="absolute top-4 left-4">
                <div class={`w-12 h-12 rounded-xl ${card.gradient} flex items-center justify-center shadow-md`}>
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
              </div>

              <!-- Номер в правом нижнем углу -->
              <div class="absolute bottom-4 right-4">
                <div class="w-8 h-8 bg-white/20 backdrop-blur-sm rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold text-xs">0{card.id}</span>
                </div>
              </div>
            </div>

            <!-- Контент карточки -->
            <div class="p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-3">{card.title}</h3>
              <p class="text-gray-600 mb-6 leading-relaxed">{card.description}</p>

              <!-- Теги -->
              <div class="flex flex-wrap gap-2 mb-6">
                <span class="px-3 py-1 bg-blue-50 text-blue-600 text-xs font-medium rounded-full">1С</span>
                <span class="px-3 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">Автоматизация</span>
                <span class="px-3 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">Бизнес</span>
              </div>

              <!-- Эффект наведения - стрелка сдвинутая вправо -->
              <div class="flex justify-end opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0 transition-all duration-300">
                <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center hover:cursor-pointer">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
      ))}
    </div>
  </div>
</section>

<script>
  // Получаем все кнопки-фильтры и все карточки, указывая их типы
  const filterButtons = document.querySelectorAll<HTMLButtonElement>('.filter-btn');
  const cards = document.querySelectorAll<HTMLElement>('.card-item');

  // Добавляем обработчик клика на каждую кнопку
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Теперь TypeScript не ругается, т.к. знает, что у HTMLButtonElement есть dataset
      const selectedCategory = button.dataset.filter;

      // 1. Обновляем стили кнопок: делаем активной только нажатую
      filterButtons.forEach(btn => {
        if (btn === button) {
          // Стили для активной кнопки
          btn.classList.add('bg-[#FDE6EA]', 'text-pink-700', 'border', 'border-pink-200', 'shadow-sm');
          btn.classList.remove('bg-white', 'text-gray-700', 'border-gray-200', 'hover:bg-gray-50');
        } else {
          // Стили для неактивных кнопок
          btn.classList.remove('bg-[#FDE6EA]', 'text-pink-700', 'border-pink-200', 'shadow-sm');
          btn.classList.add('bg-white', 'text-gray-700', 'border', 'border-gray-200', 'hover:bg-gray-50');
        }
      });

      // 2. Фильтруем карточки
      cards.forEach(card => {
        // И здесь TypeScript тоже не ругается
        const cardCategory = card.dataset.category;

        // Если выбрана категория "Все" ИЛИ категория карточки совпадает с выбранной
        if (selectedCategory === 'all' || cardCategory === selectedCategory) {
          card.style.display = ''; // Показываем карточку (более надежный способ, чем удаление/добавление 'hidden')
          card.classList.remove('hidden');
        } else {
          card.style.display = 'none'; // Скрываем карточку
          card.classList.add('hidden');
        }
      });
    });
  });
</script>
