---
const timelineItems = [
    {
        icon: 'üéØ',
        title: '–ù–∞—à–∞ –ú–∏—Å—Å–∏—è',
        text: '–£–ø—Ä–æ—â–∞—Ç—å —Å–ª–æ–∂–Ω–æ–µ. –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º —Ä—É—Ç–∏–Ω—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ—Å—Ç–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ö–∞–∂–¥—ã–π –Ω–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.'
    },
    {
        icon: 'ü§ù',
        title: '–§–∏–ª–æ—Å–æ—Ñ–∏—è –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞',
        text: '–ú—ã –Ω–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –∞ —á–∞—Å—Ç—å –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ú—ã –ø–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ "–∫–æ—Ä–æ–±–æ—á–Ω–æ–µ" —Ä–µ—à–µ–Ω–∏–µ, –∞ –∏–¥–µ–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.'
    },
    {
        icon: '‚öôÔ∏è',
        title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
        text: '–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –º–æ—â—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—è –µ–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ CRM, API –∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞–º–∏. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.'
    },
    {
        icon: 'üöÄ',
        title: '–í–∞—à –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ù–∞—à –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        text: '–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –∏–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–µ–∫, —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —É—á–µ—Ç–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É.'
    }
];
---

<section class="about-section bg-gray-50 py-20 sm:py-24">
    <div class="mx-auto max-w-5xl px-6 lg:px-8">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ -->
        <div class="text-center">
            <h2 class="text-base font-semibold leading-7 text-blue-600">–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ</h2>
            <p class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
                –ú—ã —Å—Ç—Ä–æ–∏–º —Ü–∏—Ñ—Ä–æ–≤—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
            </p>
            <p class="mt-6 max-w-2xl mx-auto text-lg leading-8 text-gray-600">
                –ù–∞—à –ø–æ–¥—Ö–æ–¥ ‚Äî —ç—Ç–æ —Å–∏–Ω–µ—Ä–≥–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
            </p>
        </div>

        <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã -->
        <div class="timeline-container relative mt-20">
            <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è -->
            <div class="timeline-line absolute left-1/2 top-0 h-full w-0.5 -translate-x-1/2 bg-blue-200">
                <div class="timeline-line-progress absolute top-0 w-full bg-blue-600"></div>
            </div>

            <!-- –≠–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ -->
            {timelineItems.map((item, index) => (
                    <div class="timeline-item reveal-on-scroll">
                        <div class={`timeline-content ${index % 2 === 0 ? 'timeline-content-left' : 'timeline-content-right'}`}>
                            <div class="timeline-icon">{item.icon}</div>
                            <h3 class="timeline-title">{item.title}</h3>
                            <p class="timeline-text">{item.text}</p>
                        </div>
                    </div>
            ))}

        </div>
    </div>
</section>

<style>
    .timeline-container {
        width: 100%;
        margin: 0 auto;
    }

    .timeline-item {
        padding: 10px 40px;
        position: relative;
        width: 50%;
        opacity: 0;
        transform: translateY(50px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }

    .timeline-item.is-visible {
        opacity: 1;
        transform: translateY(0);
    }

    .timeline-item:nth-child(odd) {
        left: 0;
    }

    .timeline-item:nth-child(even) {
        left: 50%;
    }

    .timeline-content {
        padding: 24px;
        background: white;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05);
        position: relative;
    }

    .timeline-content::after {
        content: '';
        position: absolute;
        top: 28px;
        width: 0;
        height: 0;
        border-style: solid;
    }

    .timeline-content-left { text-align: right; }
    .timeline-content-left::after {
        right: -10px;
        border-width: 10px 0 10px 10px;
        border-color: transparent transparent transparent white;
        filter: drop-shadow(1px 0px 0px #e5e7eb);
    }

    .timeline-content-right::after {
        left: -10px;
        border-width: 10px 10px 10px 0;
        border-color: transparent white transparent transparent;
        filter: drop-shadow(-1px 0px 0px #e5e7eb);
    }

    .timeline-icon {
        position: absolute;
        top: 18px;
        width: 50px;
        height: 50px;
        background-color: #2563EB;
        color: white;
        border-radius: 50%;
        z-index: 10;
        font-size: 24px;
        border: 4px solid #F9FAFB;
        display: grid;
        place-items: center;
    }

    .timeline-content-left .timeline-icon {
        right: -25px;
    }
    .timeline-content-right .timeline-icon {
        left: -25px;
    }

    .timeline-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #111827;
        margin-bottom: 8px;
    }

    .timeline-text {
        font-size: 1rem;
        line-height: 1.6;
        color: #4B5567;
    }

    .timeline-line-progress {
        height: 0;
        transition: height 0.5s linear;
    }

    @media screen and (max-width: 768px) {
        .timeline-line {
            left: 25px;
        }

        .timeline-item,
        .timeline-item:nth-child(even) {
            width: 100%;
            left: 0;
            padding-left: 60px;
            padding-right: 15px;
        }

        .timeline-content {
            text-align: left;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            row-gap: 0.5rem;
            column-gap: 1rem;
        }

        .timeline-content-left::after,
        .timeline-content-right::after {
            left: -10px;
            right: auto;
            border-width: 10px 10px 10px 0;
            border-color: transparent white transparent transparent;
            filter: drop-shadow(-1px 0px 0px #e5e7eb);
        }

        .timeline-content-left .timeline-icon,
        .timeline-content-right .timeline-icon {
            position: relative;
            left: auto;
            right: auto; /* <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨ */
            top: auto;
            border: none;
            width: 44px;
            height: 44px;
            font-size: 22px;
        }

        .timeline-title {
            flex: 1;
            margin-bottom: 0;
        }

        .timeline-text {
            flex-basis: 100%;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const timelineItems = document.querySelectorAll('.reveal-on-scroll');
        const lineProgress = document.querySelector('.timeline-line-progress') as HTMLDivElement;
        const timelineContainer = document.querySelector('.timeline-container') as HTMLDivElement;

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                }
            });
        }, {
            threshold: 0.1
        });

        timelineItems.forEach(item => {
            observer.observe(item);
        });

        function animateLine() {
            if (!lineProgress || !timelineContainer) return;
            const containerRect = timelineContainer.getBoundingClientRect();
            const windowHeight = window.innerHeight;
            const scrollTop = containerRect.top;
            const startPoint = windowHeight * (2/3);
            let progressHeight = 0;
            if (scrollTop < startPoint) {
                progressHeight = Math.min(
                    startPoint - scrollTop,
                    containerRect.height
                );
            }
            lineProgress.style.height = `${progressHeight}px`;
        }

        let isTicking = false;
        window.addEventListener('scroll', () => {
            if (!isTicking) {
                window.requestAnimationFrame(() => {
                    animateLine();
                    isTicking = false;
                });
                isTicking = true;
            }
        });

        animateLine();
    });
</script>