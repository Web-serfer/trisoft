---
import type { HTMLAttributes } from 'astro/types'

interface Props extends HTMLAttributes<'a'> {
	href: string
	text: string
	variant?: 'primary' | 'secondary' | 'teal' | 'rose' | 'indigo'
	size?: 'large' | 'normal' | 'small'
	class?: string
}

const {
	href,
	text,
	variant = 'primary',
	size = 'normal',
	class: customClass,
	...rest
} = Astro.props

const baseClasses =
	'group relative inline-flex items-center justify-center overflow-hidden rounded-full font-semibold transform transition-all duration-300 hover:-translate-y-0.5'

const variantClasses = {
	primary:
		'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg hover:shadow-blue-500/30',
	secondary:
		'border border-gray-200/80 bg-white/80 text-gray-700 shadow-md backdrop-blur-sm hover:border-gray-300 hover:bg-white hover:shadow-lg',
	teal: 'bg-teal-600 text-white hover:bg-teal-700 focus-visible:outline-teal-600',
	rose: 'bg-rose-600 text-white hover:bg-rose-700 focus-visible:outline-rose-600',
	indigo:
		'bg-white text-indigo-900 hover:bg-indigo-100 focus-visible:outline-white',
	blue: 'bg-blue-600 text-white hover:bg-blue-700 focus-visible:outline-blue-600',
	cyan: 'bg-cyan-600 text-white hover:bg-cyan-700 focus-visible:outline-cyan-600',
}

const sizeClasses = {
	large: 'px-8 py-3 text-lg',
	normal: 'px-6 py-2.5 text-base',
	small: 'px-4 py-1.5 text-xs',
}

const allClasses = [
	baseClasses,
	variantClasses[variant],
	sizeClasses[size],
	customClass,
]
---

<a href={href} class:list={allClasses} {...rest}>
  <span class="relative z-10">{text}</span>
  {variant === 'primary' && (
      <div class="absolute inset-0 bg-gradient-to-r from-blue-700 to-indigo-700 opacity-0 transition-all duration-300 group-hover:opacity-100"></div>
  )}
</a>